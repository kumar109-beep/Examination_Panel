# Generated by Django 3.1.3 on 2021-06-04 08:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlocateAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocated_id', models.CharField(max_length=50, verbose_name='Role/Designation ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssignEvaluator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(max_length=50, verbose_name='Role/Designation Name')),
                ('end_date', models.CharField(max_length=50, verbose_name='Role/Designation Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssignSubjectToCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssignTopicToSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topicsList', models.TextField(verbose_name='Topic List')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuthorityManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorityName', models.CharField(max_length=50, unique=True, verbose_name='Authority Name')),
                ('functionalityName', models.TextField(verbose_name='Functionality Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchtManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batchID', models.CharField(max_length=50, verbose_name='Batch ID')),
                ('batchName', models.CharField(max_length=50, verbose_name='Bacth Name')),
                ('batchDescription', models.CharField(blank=True, max_length=15, null=True, verbose_name='Batch Description')),
                ('batchPressor', models.CharField(blank=True, max_length=50, null=True, verbose_name='Batch Precessor')),
                ('batchSuccessor', models.CharField(blank=True, max_length=15, null=True, verbose_name='Batch Successor')),
                ('batchSuperVisorID', models.CharField(blank=True, max_length=20, null=True, verbose_name='Supervisor ID')),
                ('batchSuperVisorName', models.CharField(blank=True, max_length=50, null=True, verbose_name='Supervisor Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClusterBatchtManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clusterID', models.CharField(max_length=50, verbose_name='Cluster ID')),
                ('clusterName', models.CharField(max_length=50, verbose_name='Cluster Name')),
                ('clusterDescription', models.CharField(blank=True, max_length=15, null=True, verbose_name='Cluster Description')),
                ('clusterSuperVisorID', models.CharField(blank=True, max_length=20, null=True, verbose_name='Cluster Supervisor ID')),
                ('clusterSuperVisorName', models.CharField(blank=True, max_length=50, null=True, verbose_name='ClusterSupervisor Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(max_length=50, verbose_name='Country Code')),
                ('country_name', models.CharField(max_length=50, verbose_name='Country Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseID', models.CharField(max_length=50, unique=True, verbose_name='Course ID')),
                ('courseName', models.CharField(max_length=50, unique=True, verbose_name='Course Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Eaxm_Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paperStartDate', models.CharField(blank=True, max_length=10, null=True, verbose_name='Paper Start Date')),
                ('paper_time_start', models.CharField(blank=True, max_length=10, null=True, verbose_name='Start Time')),
                ('start_date', models.CharField(max_length=50, verbose_name='evaluate start date')),
                ('end_date', models.CharField(max_length=50, verbose_name='evaluate end date')),
                ('editStatus', models.CharField(default='In Progress', max_length=50, verbose_name='Edit Status')),
                ('paperStatus', models.CharField(default='In Progress', max_length=50, verbose_name='Paper Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExamManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examName', models.CharField(max_length=50, verbose_name='Exam Name')),
                ('examID', models.CharField(max_length=50, verbose_name='Exam ID')),
                ('examType', models.CharField(max_length=50, verbose_name='Exam Type')),
                ('examPassword', models.CharField(blank=True, max_length=4, null=True, verbose_name='Exam Password')),
                ('examStartDate', models.CharField(blank=True, max_length=10, null=True, verbose_name='Exam Start Date')),
                ('examEndDate', models.CharField(blank=True, max_length=10, null=True, verbose_name='Exam End Date')),
                ('examStatus', models.CharField(default='Up Coming', max_length=50, verbose_name='Exam Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Functionality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('functionality_name', models.CharField(max_length=50, verbose_name='Authority Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='GroupBatchtManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupID', models.CharField(max_length=50, verbose_name='Group ID')),
                ('groupName', models.CharField(max_length=50, verbose_name='Gacth Name')),
                ('groupDescription', models.CharField(blank=True, max_length=15, null=True, verbose_name='Group Description')),
                ('groupPressor', models.CharField(blank=True, max_length=50, null=True, verbose_name='Group Precessor')),
                ('groupSuccessor', models.CharField(blank=True, max_length=15, null=True, verbose_name='Group Successor')),
                ('groupSuperVisorID', models.CharField(blank=True, max_length=20, null=True, verbose_name='Supervisor ID')),
                ('groupSuperVisorName', models.CharField(blank=True, max_length=50, null=True, verbose_name='Supervisor Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LanguageManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languageCode', models.CharField(max_length=50, verbose_name='Group ID')),
                ('languageName', models.CharField(max_length=50, verbose_name='Gacth Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=32, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MainAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_authority', models.CharField(max_length=50, verbose_name='Authority Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaperManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paperID', models.CharField(max_length=50, unique=True, verbose_name='Paper ID')),
                ('paperName', models.CharField(max_length=50, unique=True, verbose_name='Paper Name')),
                ('paperTotalMarks', models.CharField(blank=True, max_length=4, null=True, verbose_name='Total Marks')),
                ('paperPassingMark', models.CharField(blank=True, max_length=4, null=True, verbose_name='Passing Marks')),
                ('paperStatus', models.CharField(blank=True, max_length=15, null=True, verbose_name='Paper Status')),
                ('paperDeafaultLanguage', models.CharField(blank=True, max_length=60, null=True, verbose_name='Paper Deafult Language')),
                ('paperLanguage', models.CharField(blank=True, max_length=60, null=True, verbose_name='Paper Language')),
                ('paperGuideLines', models.TextField(blank=True, null=True, verbose_name='Paper Guidelines')),
                ('totalPaperTime', models.CharField(blank=True, max_length=8, null=True, verbose_name='Total Time')),
                ('totalNoSection', models.CharField(blank=True, max_length=4, null=True, verbose_name='Total Section')),
                ('totalnumberOuestion', models.CharField(blank=True, max_length=4, null=True, verbose_name='Total Number Of Question')),
                ('sectionDetails', models.TextField(blank=True, null=True, verbose_name='Section Detail')),
                ('SectionWiseQuestionList', models.TextField(blank=True, null=True, verbose_name='Question Detail')),
                ('automatedSet', models.BooleanField(default=False)),
                ('noOfSets', models.CharField(blank=True, max_length=4, null=True, verbose_name='Total Number of Sets')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50)),
                ('birth_date', models.CharField(blank=True, max_length=13)),
                ('gender', models.CharField(blank=True, max_length=10)),
                ('mobile_number', models.CharField(blank=True, max_length=10)),
                ('city', models.CharField(blank=True, max_length=30)),
                ('pincode', models.CharField(blank=True, max_length=6)),
                ('address', models.TextField(blank=True)),
                ('images', models.FileField(null=True, upload_to='Upload_Images/adminImages/')),
                ('signature', models.FileField(null=True, upload_to='Upload_Images/adminSignature/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBank_Filters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Topic', models.CharField(blank=True, max_length=150)),
                ('selectNoOption', models.CharField(blank=True, max_length=13)),
                ('correctMarks', models.CharField(blank=True, max_length=13)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBank_Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(blank=True)),
                ('optionList', models.TextField(blank=True)),
                ('sameQuestionrefrence', models.CharField(blank=True, max_length=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Questions_Level_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questio_level_type_id', models.CharField(blank=True, max_length=60)),
                ('questio_level_type_name', models.CharField(blank=True, max_length=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Questions_Sub_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questio_sub_type_id', models.CharField(blank=True, max_length=60)),
                ('questio_sub_type_name', models.CharField(blank=True, max_length=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Questions_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questio_type_id', models.CharField(blank=True, max_length=60)),
                ('questio_type_name', models.CharField(blank=True, max_length=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RequestHeading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requestID', models.CharField(max_length=50, verbose_name='Request ID')),
                ('request_author', models.CharField(max_length=50, verbose_name='Request Author')),
                ('request_action_description', models.TextField(default='[]', verbose_name='Request Action')),
                ('request_action_url', models.CharField(default='[]', max_length=50, verbose_name='Request Action URL')),
                ('request_view_status', models.CharField(default='True', max_length=50, verbose_name='Request View Status')),
                ('request_time', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullName', models.CharField(default='NA', max_length=50, verbose_name='Resource Full Name')),
                ('dateOfBirth', models.CharField(default='NA', max_length=15, verbose_name='Date Of Birth')),
                ('gender', models.CharField(default='NA', max_length=10, verbose_name='Gender')),
                ('mobileNumber', models.CharField(max_length=10, unique=True, verbose_name='Mobile Number')),
                ('address', models.TextField(default='NA', verbose_name='Addresss')),
                ('district', models.CharField(default='NA', max_length=30, verbose_name='District')),
                ('pincode', models.CharField(default='NA', max_length=6, verbose_name='Pin Code')),
                ('education', models.TextField(blank=True, default='NA', verbose_name='Education')),
                ('experience', models.TextField(blank=True, default='NA', verbose_name='Experience')),
                ('images', models.FileField(null=True, upload_to='Upload_Images/resourceImages/')),
                ('signature', models.FileField(null=True, upload_to='Upload_Images/resourceSignature/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RolesAlocateAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_id', models.CharField(max_length=50, verbose_name='Role/Designation ID')),
                ('role_name', models.CharField(max_length=50, verbose_name='Role/Designation Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RolesManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleID', models.CharField(max_length=50, unique=True, verbose_name='Role/Designation ID')),
                ('roleName', models.CharField(max_length=50, unique=True, verbose_name='Role/Designation Name')),
                ('assign_authority', models.TextField(default='[]', verbose_name='Assign Authority')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_state', models.CharField(max_length=50, verbose_name='State Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullName', models.CharField(blank=True, default='NA', max_length=50, verbose_name='Full Name')),
                ('mobileNumber', models.CharField(max_length=10, verbose_name='Mobile Number')),
                ('dateOfBirth', models.CharField(blank=True, default='NA', max_length=15, verbose_name='Date Of Birth')),
                ('gender', models.CharField(blank=True, default='NA', max_length=10, verbose_name='Gender')),
                ('handy', models.CharField(blank=True, default='NA', max_length=10, verbose_name='Handy')),
                ('disability', models.CharField(blank=True, default='NA', max_length=5, verbose_name='Disability')),
                ('images', models.FileField(null=True, upload_to='Upload_Images/studentImages/')),
                ('signature', models.FileField(null=True, upload_to='Upload_Images/studentSignature/')),
                ('guardianName', models.CharField(blank=True, default='NA', max_length=60, verbose_name='Guardian Name')),
                ('guardianEmail', models.CharField(blank=True, default='NA', max_length=60, verbose_name='Guardian Email')),
                ('relationwithGuardian', models.CharField(blank=True, default='NA', max_length=30, verbose_name='Relation With Guardian')),
                ('guardianMobile', models.CharField(blank=True, default='NA', max_length=15, verbose_name="Guardian's Mobile")),
                ('temp_district', models.CharField(blank=True, default='NA', max_length=40, verbose_name='Temporary District')),
                ('temp_address', models.TextField(blank=True, default='NA', verbose_name='Temporary Address')),
                ('temp_pincode', models.CharField(blank=True, default='NA', max_length=6, verbose_name='Temporary Pincode')),
                ('temp_vs_perm', models.CharField(blank=True, default='NA', max_length=5, verbose_name='Temprary Vs Current')),
                ('perm_district', models.CharField(blank=True, default='NA', max_length=40, verbose_name='Permanant District')),
                ('perm_address', models.TextField(blank=True, default='NA', verbose_name='Permanant Address')),
                ('perm_pincode', models.CharField(blank=True, default='NA', max_length=6, verbose_name='Permanant Pincode')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_authority', models.CharField(max_length=50, verbose_name='Authority Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjectID', models.CharField(max_length=50, unique=True, verbose_name='Subject ID')),
                ('subjectName', models.CharField(max_length=50, unique=True, verbose_name='Subject Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Type_of_Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseTypeID', models.CharField(max_length=50, unique=True, verbose_name='Course ID')),
                ('courseTypeName', models.CharField(max_length=50, unique=True, verbose_name='Course Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name='type_of_course',
            constraint=models.UniqueConstraint(fields=('courseTypeID', 'courseTypeName'), name='Restrict Duplicate Type Of Course'),
        ),
        migrations.AddConstraint(
            model_name='subjects',
            constraint=models.UniqueConstraint(fields=('subjectID', 'subjectName'), name='Restrict Duplicate Subject'),
        ),
        migrations.AddField(
            model_name='subauthority',
            name='authorityName',
            field=models.ManyToManyField(blank=True, to='saletoApp.Functionality'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='courseFK',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='courseTypeFK',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.type_of_course'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='perm_countryfk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='perm_country_name', to='saletoApp.country'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='perm_statefk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='perm_state_name', to='saletoApp.state'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='referUser',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='suject',
            field=models.ManyToManyField(blank=True, to='saletoApp.Subjects'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='temp_countryfk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='temp_country_name', to='saletoApp.country'),
        ),
        migrations.AddField(
            model_name='studentmanagement',
            name='temp_statefk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='temp_state_name', to='saletoApp.state'),
        ),
        migrations.AddField(
            model_name='state',
            name='country_fk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.country', verbose_name='County FK'),
        ),
        migrations.AddConstraint(
            model_name='rolesmanagement',
            constraint=models.UniqueConstraint(fields=('roleID', 'roleName'), name='Restrict Duplicate RolesManagement'),
        ),
        migrations.AddField(
            model_name='rolesalocateauthority',
            name='assignAuthority',
            field=models.ManyToManyField(to='saletoApp.AlocateAuthority'),
        ),
        migrations.AddField(
            model_name='resourcemanagement',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.country'),
        ),
        migrations.AddField(
            model_name='resourcemanagement',
            name='referUser',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='resourcemanagement',
            name='role_designation',
            field=models.ManyToManyField(blank=True, to='saletoApp.RolesManagement'),
        ),
        migrations.AddField(
            model_name='resourcemanagement',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.state'),
        ),
        migrations.AddField(
            model_name='resourcemanagement',
            name='subject_speciality',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.subjects'),
        ),
        migrations.AddConstraint(
            model_name='questions_type',
            constraint=models.UniqueConstraint(fields=('questio_type_id', 'questio_type_name'), name='Questions_Type Constraint'),
        ),
        migrations.AddConstraint(
            model_name='questions_sub_type',
            constraint=models.UniqueConstraint(fields=('questio_sub_type_id', 'questio_sub_type_name'), name='Questions_Sub_Type Constraint'),
        ),
        migrations.AddConstraint(
            model_name='questions_level_type',
            constraint=models.UniqueConstraint(fields=('questio_level_type_id', 'questio_level_type_name'), name='Questions_Level_Type Constraint'),
        ),
        migrations.AddField(
            model_name='questionbank_question',
            name='refrence_Questions_Type_Detail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saletoApp.questionbank_filters'),
        ),
        migrations.AddField(
            model_name='questionbank_question',
            name='selectLanguage',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.languagemanagement'),
        ),
        migrations.AddField(
            model_name='questionbank_filters',
            name='difficultyLevel',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.questions_level_type'),
        ),
        migrations.AddField(
            model_name='questionbank_filters',
            name='questionType',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.questions_type'),
        ),
        migrations.AddField(
            model_name='questionbank_filters',
            name='selectCourse',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses'),
        ),
        migrations.AddField(
            model_name='questionbank_filters',
            name='selectSubject',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.subjects'),
        ),
        migrations.AddField(
            model_name='questionbank_filters',
            name='subQuestionType',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.questions_sub_type'),
        ),
        migrations.AddField(
            model_name='profile',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.country'),
        ),
        migrations.AddField(
            model_name='profile',
            name='refrence_user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='profile',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.state'),
        ),
        migrations.AddField(
            model_name='papermanagement',
            name='paperAssociateCourse',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses'),
        ),
        migrations.AddField(
            model_name='papermanagement',
            name='paperAssociateSubject',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.subjects'),
        ),
        migrations.AddField(
            model_name='mainauthority',
            name='sub_authorityName',
            field=models.ManyToManyField(blank=True, to='saletoApp.SubAuthority'),
        ),
        migrations.AddField(
            model_name='loggedinuser',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupbatchtmanagement',
            name='groupStudentFK',
            field=models.ManyToManyField(blank=True, to='saletoApp.StudentManagement'),
        ),
        migrations.AddField(
            model_name='exammanagement',
            name='examAssociateCourse',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses'),
        ),
        migrations.AddField(
            model_name='eaxm_paper',
            name='assign_evaluator',
            field=models.ManyToManyField(blank=True, related_name='assign_evaluator', to='saletoApp.ResourceManagement'),
        ),
        migrations.AddField(
            model_name='eaxm_paper',
            name='examPapers',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.papermanagement'),
        ),
        migrations.AddField(
            model_name='eaxm_paper',
            name='exam_management_fk',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.exammanagement'),
        ),
        migrations.AddField(
            model_name='eaxm_paper',
            name='paper_procter',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.resourcemanagement'),
        ),
        migrations.AddField(
            model_name='courses',
            name='courseType',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.type_of_course'),
        ),
        migrations.AddField(
            model_name='clusterbatchtmanagement',
            name='clusterBatchFK',
            field=models.ManyToManyField(blank=True, to='saletoApp.BatchtManagement'),
        ),
        migrations.AddField(
            model_name='batchtmanagement',
            name='batchStudentFK',
            field=models.ManyToManyField(blank=True, to='saletoApp.StudentManagement'),
        ),
        migrations.AddConstraint(
            model_name='authoritymanagement',
            constraint=models.UniqueConstraint(fields=('authorityName', 'functionalityName'), name='Restrict Duplicate AuthorityManagement'),
        ),
        migrations.AddField(
            model_name='assigntopictosubject',
            name='select_courseFK',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses', verbose_name='Type Of Course'),
        ),
        migrations.AddField(
            model_name='assigntopictosubject',
            name='selectsubjectFK',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.subjects'),
        ),
        migrations.AddField(
            model_name='assignsubjecttocourse',
            name='courseFK',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.courses'),
        ),
        migrations.AddField(
            model_name='assignsubjecttocourse',
            name='subjectNameFK',
            field=models.ManyToManyField(blank=True, to='saletoApp.Subjects'),
        ),
        migrations.AddField(
            model_name='assignsubjecttocourse',
            name='type_of_courseFK',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='saletoApp.type_of_course', verbose_name='Type Of Course'),
        ),
        migrations.AddField(
            model_name='assignevaluator',
            name='assign_evaluator',
            field=models.ManyToManyField(blank=True, to='saletoApp.ResourceManagement'),
        ),
        migrations.AddField(
            model_name='assignevaluator',
            name='paperID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saletoApp.papermanagement'),
        ),
        migrations.AddField(
            model_name='alocateauthority',
            name='function_authorites',
            field=models.ManyToManyField(to='saletoApp.Functionality'),
        ),
        migrations.AddField(
            model_name='alocateauthority',
            name='main_Authorities',
            field=models.ManyToManyField(to='saletoApp.MainAuthority'),
        ),
        migrations.AddField(
            model_name='alocateauthority',
            name='sub_authorites',
            field=models.ManyToManyField(to='saletoApp.SubAuthority'),
        ),
        migrations.AddConstraint(
            model_name='rolesalocateauthority',
            constraint=models.UniqueConstraint(fields=('role_id', 'role_name'), name='Restrict Duplicate Authority_RolesManagement'),
        ),
        migrations.AddConstraint(
            model_name='questionbank_question',
            constraint=models.UniqueConstraint(fields=('refrence_Questions_Type_Detail', 'question', 'optionList'), name='QuestionBank_Question Constraint'),
        ),
        migrations.AddConstraint(
            model_name='questionbank_filters',
            constraint=models.UniqueConstraint(fields=('selectCourse', 'selectSubject', 'Topic', 'questionType'), name='Restrict Duplicate QuestionBank_Filters'),
        ),
        migrations.AddConstraint(
            model_name='papermanagement',
            constraint=models.UniqueConstraint(fields=('paperID',), name='Paper Management'),
        ),
        migrations.AddConstraint(
            model_name='exammanagement',
            constraint=models.UniqueConstraint(fields=('examID',), name='ExamManagement Management'),
        ),
        migrations.AddConstraint(
            model_name='eaxm_paper',
            constraint=models.UniqueConstraint(fields=('exam_management_fk', 'examPapers', 'paperStartDate'), name='Eaxm_Paper Management'),
        ),
        migrations.AddConstraint(
            model_name='courses',
            constraint=models.UniqueConstraint(fields=('courseID', 'courseType', 'courseName'), name='Restrict Duplicate Course'),
        ),
        migrations.AddConstraint(
            model_name='assigntopictosubject',
            constraint=models.UniqueConstraint(fields=('select_courseFK', 'selectsubjectFK'), name='Restrict Duplicate Entry'),
        ),
    ]
